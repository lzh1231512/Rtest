@using DL91;
@{
    ViewData["Title"] = "Home Page";
    var TypeLst = ViewBag.TypeLst as List<DBType>;
    Layout = null;
}
@model DL91.Models.SearchViewModel
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=0">
    <style>
        @@media (min-width: 1596px) {
            #div-body-content {
                width: 1596px;
            }
        }
    </style>
</head>
<body>
    <div id="div-body-content" class="container body-content">

        <style>
            body {
                padding-top: 10px;
            }

            input[type=checkbox].form-control {
                width: 24px;
            }
        </style>
        <script src="~/js/loadJs.js"></script>
        <script>
    var GetImgURL = '@Url.Action("GetImg", "Home")';
    var IndexForAjaxUrl = '@Url.Action("IndexForAjax", "Home")';
    var BuildTime = '@DL91Web.Helpers.Common.CompileTime';
    var baseUrl = window.location.origin + '@Url.Content("~/")';
        </script>
        <div>
            <div class="panel panel-info">
                <div class="panel-heading" id="TelescopicHead" data-toggle="collapse" data-target="#SalesOrderSearchArea">
                    <h3 class="panel-title" id="displaySearchConfig">
                        Search Area <span id="displayDowntask"></span>&nbsp;&nbsp;
                    </h3>
                </div>
                <div id="SalesOrderSearchArea" class="panel-body in searchArea">
                    <div class="row">
                        <div class="col-md-2">
                            @Html.Label("", "Type")
                            <select id="typeId" name="typeId" class="form-control"></select>
                        </div>
                        <div class="col-md-2">
                            @Html.Label("", "Contains")
                            @Html.EditorFor(m => m.title1, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="col-md-2" style="line-height:40px;">
                            <label style="float:left">Is Like: &nbsp;&nbsp;</label>
                            <input id="isLike" style="float:left" type="checkbox" class="form-control" value="" />
                            <div class="clearfix"></div>
                        </div>
                        <div class="col-md-2" style="line-height:40px;">
                            <label style="float:left">From Cache: &nbsp;&nbsp;</label>
                            <input id="isFromCache" style="float:left" type="checkbox" class="form-control" value="" />
                            <div class="clearfix"></div>
                        </div>
                        <div class="col-md-2">
                            @Html.Label("", "player")
                            <select id="selPlayer" class="form-control">
                                <option value="1">ChimeeJS</option>
                                <option value="2">VideoJS</option>
                                <option value="3">XGPlayer</option>
                            </select>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col-md-12 form-button-Lines">
                            <button id="btnSubmitSalesOrderSearch" class="btn btn-info CommonBtn"><i class='fa fa-search'></i> Search</button>
                            <input id="btnClear" type="button" class="btn btn-default CommonBtn" value="Clear All" />
                            <input id="btnSync" type="button" class="btn btn-default CommonBtn" value="Sync Now" />
                        </div>
                    </div>
                </div>
            </div>
            <div id="SalesOrderResult">

            </div>
        </div>
        @*<script src="~/js/IndexDB.js" ></script>
        <script src="~/js/FileAPI.js"></script>
        <script src="~/js/cacheM3u8.js"></script>*@
        <script>
            loadStyle([
                baseUrl + 'lib/bootstrap/dist/css/bootstrap.css',
                baseUrl + 'css/site.css',
                baseUrl + 'css/pager.css',
                baseUrl + 'css/font-awesome.css'],
                BuildTime);
            loadjs([baseUrl + 'lib/jquery/dist/jquery.js',
                baseUrl + 'lib/bootstrap/dist/js/bootstrap.js',
                baseUrl + 'js/FileAPI.js',
                baseUrl + 'js/IndexDB.js',
                baseUrl + 'js/cacheM3u8.js',
                baseUrl + 'js/ajaxpager/ajaxpager.js']);

            var playHtml1 = '', playHtml2 = '', playHtml3 = '', loadjsUrl = '';
            loadHTML(baseUrl + 'play.html', BuildTime, function (ht) {
                playHtml1 = ht;
            });
            loadHTML(baseUrl + 'play2.html', BuildTime, function (ht) {
                playHtml2 = ht;
            });
            loadHTML(baseUrl + 'play3.html', BuildTime, function (ht) {
                playHtml3 = ht;
            });
            loadHTML(baseUrl + 'js/loadJs.js', BuildTime, function (ht) {
                var blob = new Blob([ht], { type: 'application/javascript' });
                loadjsUrl = URL.createObjectURL(blob);
            });
            function onPageLoad() {
                window.scrollTo(0, 0);
            }
            function play(obj) {
                var id = $(obj).data('id');
                var title = $(obj).data('title');
                var filesize = $(obj).data('filesize');
                var ishd = $(obj).data('ishd');
                var islike = $(obj).data('islike');
                var url = $(obj).data('url');
                var createdate = $(obj).data('createdate');

                var newHtml = playHtml1;// $('#selPlayer').val() == 1 ? playHtml1 : playHtml2;
                switch ($('#selPlayer').val()) {
                    case '1': newHtml = playHtml1; break;
                    case '2': newHtml = playHtml2; break;
                    case '3': newHtml = playHtml3; break;
                }
                newHtml = newHtml.replace('{id}', id)
                    .replace('{title}', title)
                    .replace('{filesize}', filesize)
                    .replace('{isHD}', ishd)
                    .replace('{isLike}', islike)
                    .replace('{url}', url)
                    .replace('{createdate}', createdate)
                    .replace('{loadJsUrl}', loadjsUrl)
                    .replace(/{site}/g, baseUrl);

                var blob = new Blob([newHtml], { type: 'text/html' });
                obj.href = URL.createObjectURL(blob);
            }
            function edit(obj) {
                var id = $(obj).data('id');
                obj.href = '@Url.Action("Edit")?id=' + id;
            }
            async function fixOldData() {
                var list = await m3u8.getCachedList();
                var ids = [];
                for (var i = 0; i < list.length; i++) {
                    if (!list[i].createDate) {
                        ids.push(list[i].id);
                    }
                }
                if (ids.length > 0) {
                    $.ajax({
                        method: "post",
                        type:'json',
                        url: "@Url.Action("GetByIDs")",
                        data: { ids: ids.join(',') },
                        success: function (data) {
                            for (var i = 0; i < list.length; i++) {
                                if (!list[i].createDate) {
                                    for (var j = 0; j < data.length; j++) {
                                        if (list[i].id == data[j].id) {
                                            list[i].createDate = data[j].createDate;
                                            list[i].fileSize = data[j].fileSize;
                                            list[i].isHD = data[j].isHD;
                                            list[i].isLike = data[j].isLike;
                                            list[i].title = data[j].title;
                                            m3u8.updateCache(list[i]);
                                            break;
                                        }
                                    }
                                }
                            }
                            alert('fixed');
                        }
                    });
                }
            }

            async function getTypes() {
                $('#typeId').empty();
                var dt = localStorage.getItem('getTypes');
                if (dt) {
                    var data = JSON.parse(dt);
                    for (var i = 0; i < data.length; i++) {
                        $('#typeId').append("<option   value='" + data[i].id + "'>" + data[i].name + "</option>");
                    }
                }
                $.ajax({
                    method: "post",
                    type: 'json',
                    url: "@Url.Action("GetTypes")",
                    success: function (data) {
                        $('#typeId').empty();
                        for (var i = 0; i < data.length; i++) {
                            $('#typeId').append("<option   value='" + data[i].id + "'>" + data[i].name + "</option>");
                        }
                        localStorage.setItem('getTypes', JSON.stringify(data))
                    }
                });
            }

            $(function () {
                $('#selPlayer').change(function () {
                    localStorage.setItem('selPlayer', $(this).val());
                });
                var pl = localStorage.getItem('selPlayer');
                if (pl) {
                    $('#selPlayer').val(pl);
                }
                $('#btnClear').click(function(){
                    $('#title1,#title2').val('');
                    $('#isLike').prop('checked',false);
                });
                $('#btnSync').click(function () {
                    $.post('@Url.Action("sync")');
                    alert('OK');
                });
                m3u8.initDownload(function (taskCount) {
                    $('#displayDowntask').html('('+taskCount+')');
                });
                $('#btnSubmitSalesOrderSearch').click(async function () {
                    if ($('#isFromCache').is(':checked')) {
                        var list = await m3u8.getCachedList();
                        list.sort(function (a,b) {
                            return a.title > b.title ? -1 : 1;
                        });
                        ajaxPager.pager.gotopage(1, $("div.pagination-container"), false, list);
                    }
                    else {
                        var baseurl = IndexForAjaxUrl + "?currentPage=0&&title1=" + ($('#title1').val() || '') + "&&title2=" + ($('#title2').val() || '') + "&&isLike=" + ($('#isLike').is(':checked')?1:2) + "&&typeId=" + $('#typeId').val();
                        $('input[name=hipagebaseurl]').val(baseurl);
                        ajaxPager.pager.gotopage(1, $("div.pagination-container"));
                    }

                    return false;
                });
                $('#btnSubmitSalesOrderSearch').click();
                //fixOldData();
                getTypes();
            });
            history.pushState(null, null, location.href);
            window.addEventListener('popstate', function (event) {
                if ($('#hicurrentPage').val() != '1') {
                    history.pushState(null, null, location.href);
                    $('span.btnprevious').click();
                }
            });
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('./sw-cache.js');
            }
        </script>
    </div>
</body>
</html>
